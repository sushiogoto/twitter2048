// Generated by CoffeeScript 1.8.0
(function() {
  var areArraysSame, boardIsFull, canGameContinue, canMove, createEmptyBoard, direction, moveIsValid, myNumbers, newBoard, nthElementFromLast, setRow;

  moveIsValid = function(originalBoard, newBoard) {
    var col, row, _i, _j;
    for (row = _i = 0; _i <= 3; row = ++_i) {
      for (col = _j = 0; _j <= 3; col = ++_j) {
        if (originalBoard[row][col] !== newBoard[col][row]) {
          return true;
        }
      }
    }
    return false;
  };

  boardIsFull = function(board) {
    var elem, row, _i, _j, _len, _len1;
    for (_i = 0, _len = board.length; _i < _len; _i++) {
      row = board[_i];
      for (_j = 0, _len1 = board.length; _j < _len1; _j++) {
        elem = board[_j];
        if (elem === 0) {
          return false;
        }
      }
    }
    return true;
  };

  newBoard = createBoard();

  canMove = boardIsFull(board);

  canGameContinue = function(board) {
    return !boardIsFull(board) && noValidMoves(board);
  };

  createEmptyBoard = function() {
    var board, col, row, _i, _j;
    board = [];
    for (row = _i = 0; _i <= 3; row = ++_i) {
      for (col = _j = 0; _j <= 3; col = ++_j) {
        board[row][col] = 0;
      }
    }
    return board;
  };

  setRow = function(board, rowIndex, rowArray) {
    var newRow, r, _i, _results;
    board[rowIndex] = rowArray;
    if (direction === 'right') {
      _results = [];
      for (r = _i = 0; _i <= 3; r = ++_i) {
        newRow = collapseRow(r);
        _results.push(setRow(board, newRow, r));
      }
      return _results;
    }
  };

  moveIsValid = function() {
    var col, row, _i, _j;
    for (row = _i = 0; _i <= 3; row = ++_i) {
      for (col = _j = 0; _j <= 3; col = ++_j) {
        if (originalBoard[row][col] !== newBoard[row][col]) {
          return true;
        }
      }
    }
    return false;
  };

  nthElementFromLast = function(array, n) {
    return arr[arr.length - n];
  };

  myNumbers = [4, 7, 11, 12];

  console.log(nthElementFromLast(myNumbers, 2));

  areArraysSame = function(array1, array2) {
    var areSame, index, _i, _ref, _results;
    areSame = true;
    if (array1.length !== array2.length) {
      areSame = false;
    }
    _results = [];
    for (index = _i = 0, _ref = array1.length; 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
      if (array1[index] !== array2[index]) {
        _results.push(areSame = false);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  direction = 'up';

  if (direction === 'left' || 'right') {
    console.log("You want to go horizontally");
  } else if (direction === 'up' || 'down') {
    console.log("You want to go vertically");
  }

}).call(this);

//# sourceMappingURL=mark_debug.js.map
