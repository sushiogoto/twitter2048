// Generated by CoffeeScript 1.8.0
(function() {
  var animateTimeLeft, boardIsFull, buildBoard, collapseCells, generateTile, generateTileValue, getCol, getRow, hideEverything, isGameOver, mergeCells, move, moveIsValid, newGame, noValidMoves, printArray, randomCellIndices, randomInt, setCol, setRow, showBoard, shrinkStop, totalScores,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  randomInt = function(x) {
    return Math.floor(Math.random() * x);
  };

  randomCellIndices = function() {
    return [randomInt(4), randomInt(4)];
  };

  buildBoard = function() {
    return [0, 1, 2, 3].map(function() {
      return [0, 1, 2, 3].map(function() {
        return 0;
      });
    });
  };

  generateTileValue = function() {
    var tileValue;
    tileValue = randomInt(5);
    if (tileValue < 4) {
      tileValue = 2;
    } else {
      tileValue = 4;
    }
    return tileValue;
  };

  generateTile = function(board) {
    var col, row, tileValue, _ref;
    _ref = randomCellIndices(), row = _ref[0], col = _ref[1];
    tileValue = generateTileValue();
    if (board[row][col] === 0) {
      board[row][col] = tileValue;
    } else {
      generateTile(board);
      console.log("Reset tile generation");
    }
    return console.log("row: " + row + " / col: " + col);
  };

  move = function(board, direction) {
    var column, i, newBoard, row, _i;
    newBoard = buildBoard();
    for (i = _i = 0; _i <= 3; i = ++_i) {
      if (direction === 'right' || direction === 'left') {
        row = getRow(i, board);
        row = mergeCells(row, direction);
        row = collapseCells(row, direction);
        setRow(row, i, newBoard);
      } else if (direction === 'up' || direction === 'down') {
        column = getCol(i, board);
        column = mergeCells(column, direction);
        column = collapseCells(column, direction);
        setCol(column, i, newBoard);
      }
    }
    return newBoard;
  };

  getRow = function(r, board) {
    return [board[r][0], board[r][1], board[r][2], board[r][3]];
  };

  getCol = function(c, board) {
    return [board[0][c], board[1][c], board[2][c], board[3][c]];
  };

  setRow = function(row, index, board) {
    return board[index] = row;
  };

  setCol = function(col, index, board) {
    var row, _i, _results;
    _results = [];
    for (row = _i = 0; _i <= 3; row = ++_i) {
      _results.push(board[row][index] = col[row]);
    }
    return _results;
  };

  mergeCells = function(cells, direction) {
    var merge;
    $('.dino').trigger("stop");
    merge = function(cells) {
      var a, b, _i, _j, _ref;
      for (a = _i = 3; _i >= 1; a = --_i) {
        for (b = _j = _ref = a - 1; _ref <= 0 ? _j <= 0 : _j >= 0; b = _ref <= 0 ? ++_j : --_j) {
          if (cells[a] === 0) {
            break;
          } else if (cells[a] === cells[b]) {
            cells[a] *= 2;
            cells[b] = 0;
            shrinkStop(cells[a]);
          } else if (cells[b] !== 0) {
            break;
          }
        }
      }
      return cells;
    };
    switch (direction) {
      case "right":
      case "down":
        cells = merge(cells);
        break;
      case "left":
      case "up":
        cells = merge(cells.reverse()).reverse();
    }
    return cells;
  };

  shrinkStop = function(mergeValue) {
    var timeLeft, x, zoomSize;
    x = 0;
    zoomSize = $('.board').css;
    timeLeft = parseFloat($('.board').css("zoom")) * this.totalTime;
    if (mergeValue === 8) {
      alert(timeLeft);
      timeLeft += 1000;
      x += 0.2;
      $('.board').stop();
      zoomSize("zoom", x);
      $('.dino').trigger("play");
      return $(".board").animate({
        'zoom': x
      }, timeLeft, void 0, (function(_this) {
        return function() {
          var _ref;
          showBoard(_this.board);
          $(".button-level").removeAttr("style");
          $(".board").stop();
          $(".board").hide("fast");
          return _ref = newGame(), _this.score = _ref[0], _this.board = _ref[1], _ref;
        };
      })(this));
    }
  };

  animateTimeLeft = function(animation) {
    var quotient;
    return quotient = $('.board').css("zoom");
  };

  collapseCells = function(cells, direction) {
    cells = cells.filter(function(x) {
      return x !== 0;
    });
    while (cells.length < 4) {
      if (direction === 'right' || direction === 'down') {
        cells.unshift(0);
      } else if (direction === 'left' || direction === 'up') {
        cells.push(0);
      }
    }
    return cells;
  };

  moveIsValid = function(originalBoard, newBoard) {
    var col, row, _i, _j;
    for (row = _i = 0; _i <= 3; row = ++_i) {
      for (col = _j = 0; _j <= 3; col = ++_j) {
        if (originalBoard[row][col] !== newBoard[row][col]) {
          return true;
        }
      }
    }
    return false;
  };

  boardIsFull = function(board) {
    var row, _i, _len;
    for (_i = 0, _len = board.length; _i < _len; _i++) {
      row = board[_i];
      if (__indexOf.call(row, 0) >= 0) {
        return false;
      }
    }
    return true;
  };

  noValidMoves = function(board) {
    var direction, newBoard, _i, _len, _ref;
    _ref = ['left', 'right', 'up', 'down'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      direction = _ref[_i];
      newBoard = move(board, direction);
      if (moveIsValid(board, newBoard)) {
        return false;
      }
    }
    return true;
  };

  isGameOver = function(board, direction) {
    return boardIsFull(board) && noValidMoves(board, direction);
  };

  showBoard = function(board) {
    var col, row, _i, _results;
    _results = [];
    for (row = _i = 0; _i <= 3; row = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (col = _j = 0; _j <= 3; col = ++_j) {
          if (board[row][col] === 0) {
            _results1.push($(".r" + row + ".c" + col + " > div").html(" "));
          } else {
            _results1.push($(".r" + row + ".c" + col + " > div").html(board[row][col]));
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  printArray = function(array) {
    var row, _i, _len;
    console.log("-- Start --");
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      row = array[_i];
      console.log(row);
    }
    return console.log("-- End --");
  };

  totalScores = function(board, highscore) {
    var col, row, score, _i, _j;
    if (highscore == null) {
      highscore = 0;
    }
    score = 0;
    for (row = _i = 0; _i <= 3; row = ++_i) {
      for (col = _j = 0; _j <= 3; col = ++_j) {
        score += board[row][col];
      }
    }
    if (score > highscore) {
      highscore = score;
    }
    return [score, highscore];
  };

  newGame = function() {
    var newBoard, score;
    newBoard = buildBoard();
    generateTile(newBoard);
    generateTile(newBoard);
    score = 0;
    return [score, newBoard, $(".board").removeAttr("style"), showBoard(newBoard)];
  };

  hideEverything = function(board) {
    return [newGame(), $(".board").removeAttr("style"), $(".score-container").text(0), $(".best-container").text(this.highscore), $(".button-level").removeAttr("style"), $(".board").stop(), $(".board").hide("fast")];
  };

  $(function() {
    var _ref, _ref1;
    _ref = newGame(), this.score = _ref[0], this.board = _ref[1];
    _ref1 = totalScores(this.board, this.highscore), this.score = _ref1[0], this.highscore = _ref1[1];
    $(".button-level > button").click(function() {
      if (this.id === "hard") {
        this.totalTime = 10000;
      } else if (this.id === "easy") {
        this.totalTime = 50000;
      }
      alert(this.totalTime);
      $(".button-level").hide("fast");
      $(".title").css("display", "inline-block");
      $(".scores-container").css("display", "inline-block");
      $(".score-container").text(this.score);
      $(".best-container").text(this.highscore);
      $(".board").show("fast");
      return $(".board").animate({
        'zoom': 0
      }, this.totalTime, void 0, (function(_this) {
        return function() {
          var _ref2;
          showBoard(_this.board);
          $(".button-level").removeAttr("style");
          $(".board").stop();
          $(".board").hide("fast");
          return _ref2 = newGame(), _this.score = _ref2[0], _this.board = _ref2[1], _ref2;
        };
      })(this));
    });
    return $('body').keydown((function(_this) {
      return function(event) {
        var direction, key, keys, newBoard, _ref2, _ref3;
        key = event.which;
        keys = [37, 38, 39, 40];
        if (__indexOf.call(keys, key) >= 0) {
          event.preventDefault();
          console.log("key: ", key);
          direction = (function() {
            switch (key) {
              case 37:
                return "left";
              case 38:
                return "up";
              case 39:
                return "right";
              case 40:
                return "down";
            }
          })();
          console.log("direction is " + direction);
          newBoard = move(_this.board, direction);
          if (moveIsValid(_this.board, newBoard)) {
            console.log("valid");
            _this.board = newBoard;
            generateTile(newBoard);
            _ref2 = totalScores(_this.board, _this.highscore), _this.score = _ref2[0], _this.highscore = _ref2[1];
            $(".score-container").text(_this.score);
            $(".best-container").text(_this.highscore);
            if (isGameOver(_this.board, direction)) {
              alert("YOU LOSE! YOU SUCK! HAHAHA");
              showBoard(_this.board);
              $(".button-level").removeAttr("style");
              $(".board").stop();
              $(".board").hide("fast");
              return _ref3 = newGame(), _this.score = _ref3[0], _this.board = _ref3[1], _ref3;
            } else {
              return showBoard(_this.board);
            }
          } else {
            return console.log("invalid");
          }
        }
      };
    })(this));
  });

}).call(this);

//# sourceMappingURL=main.js.map
