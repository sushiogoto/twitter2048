// Generated by CoffeeScript 1.8.0
(function() {
  var boardIsFull, buildBoard, collapseCells, generateTile, generateTileValue, getRow, isGameOver, mergeCells, move, moveIsValid, noValidMoves, printArray, randomCellIndices, randomInt, setRow, showBoard,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  randomInt = function(x) {
    return Math.floor(Math.random() * x);
  };

  randomCellIndices = function() {
    return [randomInt(4), randomInt(4)];
  };

  buildBoard = function() {
    return [0, 1, 2, 3].map(function() {
      return [0, 1, 2, 3].map(function() {
        return 0;
      });
    });
  };

  generateTileValue = function() {
    var tileValue;
    tileValue = randomInt(5);
    if (tileValue < 4) {
      tileValue = 2;
    } else {
      tileValue = 4;
    }
    return tileValue;
  };

  generateTile = function(board) {
    var col, row, tileValue, _ref;
    _ref = randomCellIndices(), row = _ref[0], col = _ref[1];
    tileValue = generateTileValue();
    if (board[row][col] === 0) {
      board[row][col] = tileValue;
    } else {
      generateTile(board);
      console.log("Reset tile generation");
    }
    return console.log("row: " + row + " / col: " + col);
  };

  move = function(board, direction) {
    var i, newBoard, row, _i;
    newBoard = buildBoard();
    for (i = _i = 0; _i <= 3; i = ++_i) {
      if (direction === 'right') {
        row = getRow(i, board);
        row = mergeCells(row, direction);
        row = collapseCells(row, direction);
        setRow(row, i, newBoard);
      }
    }
    return newBoard;
  };

  getRow = function(r, board) {
    return [board[r][0], board[r][1], board[r][2], board[r][3]];
  };

  setRow = function(row, index, board) {
    return board[index] = row;
  };

  mergeCells = function(row, direction) {
    var a, b, _i, _j, _ref;
    if (direction === "right") {
      for (a = _i = 3; _i >= 1; a = --_i) {
        for (b = _j = _ref = a - 1; _ref <= 0 ? _j <= 0 : _j >= 0; b = _ref <= 0 ? ++_j : --_j) {
          if (row[a] === 0) {
            break;
          } else if (row[a] === row[b]) {
            console.log('merge');
            row[a] *= 2;
            row[b] = 0;
          } else if (row[b] !== 0) {
            break;
          }
        }
      }
    }
    return row;
  };

  collapseCells = function(row, direction) {
    row = row.filter(function(x) {
      return x !== 0;
    });
    if (direction === 'right') {
      while (row.length < 4) {
        row.unshift(0);
      }
    }
    return row;
  };

  moveIsValid = function(originalBoard, newBoard) {
    var col, row, _i, _j;
    for (row = _i = 0; _i <= 3; row = ++_i) {
      for (col = _j = 0; _j <= 3; col = ++_j) {
        if (originalBoard[row][col] !== newBoard[row][col]) {
          return true;
        }
      }
    }
    return false;
  };

  isGameOver = function(board) {
    return boardIsFull(board) && noValidMoves(board);
  };

  boardIsFull = function(board) {
    return true;
  };

  noValidMoves = function(board) {
    return true;
  };

  showBoard = function(board) {
    var col, row, _i, _results;
    _results = [];
    for (row = _i = 0; _i <= 3; row = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (col = _j = 0; _j <= 3; col = ++_j) {
          _results1.push($(".r" + row + ".c" + col + " > div").html(board[row][col]));
        }
        return _results1;
      })());
    }
    return _results;
  };

  printArray = function(array) {
    var row, _i, _len;
    console.log("-- Start --");
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      row = array[_i];
      console.log(row);
    }
    return console.log("-- End --");
  };

  $(function() {
    this.board = buildBoard();
    generateTile(this.board);
    generateTile(this.board);
    showBoard(this.board);
    return $('body').keydown((function(_this) {
      return function(event) {
        var direction, key, keys, newBoard;
        key = event.which;
        keys = [37, 38, 39, 40];
        if (__indexOf.call(keys, key) >= 0) {
          event.preventDefault();
          console.log("key: ", key);
          direction = (function() {
            switch (key) {
              case 37:
                return "left";
              case 38:
                return "up";
              case 39:
                return "right";
              case 40:
                return "down";
            }
          })();
          console.log("direction is " + direction);
          newBoard = move(_this.board, direction);
          printArray(newBoard);
          if (moveIsValid(_this.board, newBoard)) {
            console.log("valid");
            _this.board = newBoard;
            generateTile(_this.board);
            showBoard(_this.board);
            if (isGameOver(_this.board)) {
              return console.log("YOU LOSE!");
            }
          } else {
            return console.log("invalid");
          }
        } else {

        }
      };
    })(this));
  });

}).call(this);

//# sourceMappingURL=main.js.map
